PROMPT
=======
Return an array consisting of the largest number from each provided sub-array. For simplicity, the provided array will contain exactly 4 sub-arrays.

Remember, you can iterate through an array with a simple for loop, and access each member with array syntax arr[i].


SOLUTION (WITH COMMENTS)
=========================
function largestOfFour(arr) {
  let $largest = [];

  for (let i = 0;i < arr.length;i++) {
    // Reset $max inside the outer loop
    let $max;

    // Use the inner loop to check each number in arr[i]
    for (let j = 0;j < arr[i].length;j++) {

      // If the number is larger than $max, reset $max
      if (arr[i][j] > $max || $max == undefined ) {
        $max = arr[i][j];
        
      }
    } // End inner loop, j

    // Add $max to the return array
    $largest.push($max);

  } // end outer loop, i
  console.log($largest)
  return $largest;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);


SOLUTION (WITHOUT COMMENTS)
=========================
function largestOfFour(arr) {
  let $largest = [];

  for (let i = 0;i < arr.length;i++) {
    let $max;
    for (let j = 0;j < arr[i].length;j++) {
      if (arr[i][j] > $max || $max == undefined ) {
        $max = arr[i][j];
        
      }
    }

    $largest.push($max);

  }
  console.log($largest)
  return $largest;
}

largestOfFour([[4, 5, 1, 3], [13, 27, 18, 26], [32, 35, 37, 39], [1000, 1001, 857, 1]]);
