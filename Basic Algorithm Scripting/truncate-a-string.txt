## PROMPT
============
Truncate a string (first argument) if it is longer than the given maximum string length (second argument). Return the truncated string with a ... ending.

Opted to use the substring method here, entering 0 as the start index, num as the end index, and concatenating ... to the end of the return string.

This would have also worked with the str.slice method... Almost identically...
`return str.slice(0, num) + "...";`

The official solutions used a different approach which required creating a secondary return value, instead of operating directly on str. This is because JavaScript strings are immutable. 

The slick ternary operator could have been used to get rid of the clunky if-else statement blocks.

`return str.length > num ? str.slice(0, num) + "..." : str;`

I'm not sure whether there is an advantage to using slice instead of substring?

### SLICE VS SUBSTRING
===================

`Slice` is a string method and an array method, while `Substring` is only a string method.



#### Syntax
str.slice(beginIndex[, endIndex])

â€¢beginIndex: The zero-based index at which to begin extraction
â€¢endIndex: The zero-based index before which to end extraction. The character at this index will not be included.

str.substring(indexStart[, indexEnd])

Honestly, this is pretty complicated. I think it really only matters when you might have negative indices.

From Mozilla:
> The substring() and slice() methods are almost identical, but there are a couple of subtle differences between the two, especially in the way negative arguments are dealt with.

> The substring() method swaps its two arguments if indexStart is greater than indexEnd, meaning that a string is still returned. The slice() method returns an empty string if this is the case.

```JavaScript
let text = 'Mozilla'
console.log(text.substring(5, 2))  // => "zil" 
console.log(text.slice(5, 2))      // => ""
```

If either or both of the arguments are negative or NaN, the substring() method treats them as if they were 0.

```JavaScript
console.log(text.substring(-5, 2))  // => "Mo"
console.log(text.substring(-5, -2)) // => ""
```

> `slice()` also treats NaN arguments as 0, but when it is given negative values it counts backwards from the end of the string to find the indexes.

```JavaScript
console.log(text.slice(-5, 2))   // => ""
console.log(text.slice(-5, -2))  // => "zil"
```


##### References
=> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice
=> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring
=> https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring/#Differences_between_substring_and_slice


## MY SOLUTION
============
/**
 * truncateString
 * @param string  : str to clip short
 * @param integer : num to indicate the max str length allowed
 * @return string : the clipped string
 */
function truncateString(str, num) {
  if (str.length > num) {
    return str.substring(0,num)+'...';
  }
  else {
    return str;
  }
}

truncateString("A-tisket a-tasket A green and yellow basket", 8);
